openapi: 3.0.0
# 1) Define the security scheme type (HTTP bearer)
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value 
info:
  title: Flashcard v2 Open API Documentation
  version: 1.0.0
  description: |
    <h2>ER Diagram</h2>
    [![](https://mermaid.ink/img/pako:eNqVU8tuhDAM_JXI591DHyfObX-gV6SVRQyNBAlyHK1WwL83EKpdSqjUcCDxTOwZyxmgcpqgAOI3gw1jV1oVV_DEXg3pMC9jhRriBbgYfQe8sLGNstjRLtij91fHezZ1aNoUndKvQtZeTeP5PI7xEIs5vqlClRC_B0ZG0gzkJNXsrOzpaP2VOJcmFc2lcr0YZy9PR8DzEfByBLz-cr8aHv6nK9t1Tb5is5TZFPGVY_q7x1tKGoIMnlG5IBuJhxOzuXIP6yjow3GHsmzFPFo7bEb0ljZwgo7ibaPjNC8CS5AviklgdqCpxtDKbGSK1NDPNd61EcdQ1Nh6OgEGcZ83W0EhHOiHtL6LlTV9A2pgAUw)](https://mermaid.live/edit#pako:eNqVU8tuhDAM_JXI591DHyfObX-gV6SVRQyNBAlyHK1WwL83EKpdSqjUcCDxTOwZyxmgcpqgAOI3gw1jV1oVV_DEXg3pMC9jhRriBbgYfQe8sLGNstjRLtij91fHezZ1aNoUndKvQtZeTeP5PI7xEIs5vqlClRC_B0ZG0gzkJNXsrOzpaP2VOJcmFc2lcr0YZy9PR8DzEfByBLz-cr8aHv6nK9t1Tb5is5TZFPGVY_q7x1tKGoIMnlG5IBuJhxOzuXIP6yjow3GHsmzFPFo7bEb0ljZwgo7ibaPjNC8CS5AviklgdqCpxtDKbGSK1NDPNd61EcdQ1Nh6OgEGcZ83W0EhHOiHtL6LlTV9A2pgAUw)
servers:
  - url: http://127.0.0.1:8080/
paths:
  /api/register:
    description: End Point to create new users
    post:
      requestBody:
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  name:
                    type: string
                    example: ali123
                  password:
                    type: string
                    example: ali123
                  email:
                    type: string
                    example: ali123@flashcards.com
      responses:
        '200':
          description: Successfully created.
          content:
            application/json:
              schema:
                title: response
                type: object
                properties:
                  access_token:
                    type: string
                    example: access_token
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                title: response
                type: object
                properties:
                  msg:
                    type: string
                    example: msg
         
  /api/user:
    description:
      End point to read, update a user resource with username.
    get:
      description: Operation to get a user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  username:
                    type: string
                  scores:
                    type: object
                  category:
                    type: object
    put:
      description: Operation to update the user password
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfuly updated.
          content:
            application/json:
              schema:
                title: response
                type: object
                properties:
                  msg:
                    type: string
                    example: Edit Successful
    delete:
      description: Operation to delete the user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfuly deleted.
          content:
            application/json:
              schema:
                title: response
                type: object
                properties:
                  msg:
                    type: string
                    example: Delete Successful

    post:
      description: Operation to login a user
      requestBody:
        content:
          application/json:
            schema:
              title: user object
              type: object
              properties:
                name:
                  type: string
                  example: ali
                password:
                  type: string
                  example: ali23
      responses:
        '200':
          description: Successfully created.
          content:
            application/json:
              schema:
                title: response
                type: object
                properties:
                  access_token:
                    type: string
                    example: access_token
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
  /api/score:
     description: Scores endpoint
     get:
       description: Operation to get leaderboard details
       security:
         - bearerAuth: []
       responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  leaderboard:
                    type: object
     post:
       description: Record a score
       security:
        - bearerAuth: []
       requestBody:
         content:
           application/json:
             schema:
               title: user object
               type: object
               properties:
                 category_id:
                   type: integer
                 score:
                   type: integer
       responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  msg:
                    type: string
                    example: Scores stored successfully!

  /api/allcards/{category_id}:
     description: All cards in a deck endpoint
     get:
       description: Operation to get leaderboard details
       security:
         - bearerAuth: []
       parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
       responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  title:
                    type: object
                  description:
                    type: object
                  card_ids:
                    type: array
        '404':
          description: Not Found.
          content:
            application/json:
              schema:
                title: response
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid Category
  /api/allcards:
     description: All cards in a deck endpoint
     post:
       description: all cards in a deck
       security:
        - bearerAuth: []
       requestBody:
         content:
           application/json:
             schema:
               title: user object
               type: object
               properties:
                 answers:
                   type: object
                 card_ids:
                   type: array
                 category_id:
                   type: integer
       responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  allcards:
                    type: object

  
  /api/download:
     description: Download deck endpoint
     post:
       description: Download deck in csv format
       security:
        - bearerAuth: []
       requestBody:
         content:
           application/json:
             schema:
               title: user object
               type: object
               properties:
                 category_id:
                   type: integer
       responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  allcards:
                    type: object
        
  /api/card/{card_id}:
    description: >-
      End point to read, update a card resource with card_id.
    get:
      description: Operation to get card details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: card_id
          required: true
          schema:
            type: integer
            example: 4
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  card_id:
                    type: integer
                    example: 4
                  category_id:
                    type: integer
                    example: 1
                  front:
                    type: string
                    example: Water
                  answer:
                    type: integer
                    example: 1
                  option_1:
                    type: string
                    example: पानी
                  option_2:
                    type: string
                    example: आग
                  option_3:
                    type: string
                    example: पौधा
                  option_4:
                    type: string
                    example: धरती
                   
        '404':
          description: Resource not found.
    put:
        description: Operation to update the card
        security:
        - bearerAuth: []
        parameters:
          - in: path
            name: card_id
            required: true
            schema:
              type: integer
              example: 4
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  category_id:
                    type: integer
                    example: 1
                  front:
                    type: string
                    example: Water
                  answer:
                    type: integer
                    example: 1
                  option_1:
                    type: string
                    example: पानी
                  option_2:
                    type: string
                    example: पौधा
                  option_3:
                    type: string
                    example: आग
                  option_4:
                    type: string
                    example: धरती
        responses:
          '200':
            description: Successfuly updated.
            content:
              application/json:
                schema:
                  title: user object
                  type: object
                  properties:
                    msg:
                      type: string
                      example: Created Successfully!
    delete:
        description: Operation to delete the card.
        security:
        - bearerAuth: []
        parameters:
          - in: path
            name: card_id
            required: true
            schema:
              type: integer
              example: 4
        responses:
          '200':
            description: Successfully Deleted.
            content:
              application/json:
                schema:
                  title: user object
                  type: object
                  properties:
                    msg:
                      type: string
                      example: Delete Successful
  /api/card:
    post:
        description: Operation to create a card
        security:
        - bearerAuth: []
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  category_id:
                    type: integer
                    example: 1
                  front:
                    type: string
                    example: Water
                  answer:
                    type: integer
                    example: 1
                  option_1:
                    type: string
                    example: पानी
                  option_2:
                    type: string
                    example: पौधा
                  option_3:
                    type: string
                    example: आग
                  option_4:
                    type: string
                    example: धरती
        responses:
          '200':
            description: Successfuly updated.
            content:
              application/json:
                schema:
                  title: user object
                  type: object
                  properties:
                    msg:
                      type: string
                      example: Created Successfully!
    
  /api/deck/{category_id}:
    description: >-
      End point to read, update a deck resource with category_id.
    get:
      description: Operation to get deck details
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: category_id
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  name:
                    type: string
                    example: Hindi
                  description:
                    type: string
                    example: Learn Hindi Now!!           
    put:
        description: Operation to update the deck details
        security:
        - bearerAuth: []
        parameters:
          - in: path
            name: category_id
            required: true
            schema:
              type: integer
              example: 1
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Hindi
                  description:
                    type: string
                    example: Learn Hindi!!
        responses:
          '200':
            description: Successfuly updated.
            content:
              application/json:
                schema:
                  title: user object
                  type: object
                  properties:
                    category_id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Hindi
                    description:
                      type: string
                      example: Learn Hindi!!
    delete:
        description: Operation to delete the deck.
        security:
        - bearerAuth: []
        parameters:
          - in: path
            name: category_id
            required: true
            schema:
              type: integer
              example: 1
        responses:
          '200':
            description: Successfully Deleted.
            content:
              application/json:
                schema:
                  title: user object
                  type: object
                  properties:
                    msg:
                      type: string
                      example: Delete Successfull

    
  /api/deck:
    description: End point to create and delete a deck.
    post:
        description: Operation to create a deck
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: French
                  description:
                    type: string
                    example: Learn French Now!!
        responses:
          '200':
            description: Successfuly updated.
            content:
              application/json:
                schema:
                  title: user object
                  type: object
                  properties:
                    msg:
                      type: string
                      example: Created Successfully

       

    